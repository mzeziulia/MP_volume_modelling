# -*- coding: utf-8 -*-
"""Final version for the paper 20210329.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hL47qZ4y4hEipiLdP4HYuewkBuqRGqc0
"""
# %%
import matplotlib.pyplot as plt
import numpy as np

from scipy.integrate import odeint










# %%"""Calculate fluxes"""
def compute_flows_v2(ions_i_amount2, time_step, ions_o2, conductances, c_spec, V_t0, V_t, X_amount, buffer_capacity_T0, A_from_V_const, RTdivF, RT = 2578.5871, F = 96485.0):
    '''
    ions_i_amount[0] and ions_o[0] refer to chloride amount/concentrations (internal and external)
    ions_i_amount[1] and ions_o[1] refer to Na amount/concentrations (internal and external)
    ions_i_amount[2] and ions_o[2] refer to H amopunt/concentrations (internal and external)
    ions_i_amount[3] and ions_o[3] refer to K amopunt/concentrations (internal and external)

    conductances[0] contains g_asor
    conductances[1] contains g_tpc
    conductances[2] contains g_k
    conductances[3] contains g_CLC
    conductances[4] contains g_NHE
    conductances[5] contains g_Cl/OH
    conductances[6] contains g_ATPase
    conductances[7] contains g_H_leak
    '''

    dIons_dt = np.zeros(ions_i_amount2.shape[0])

    # unpack the ion concentrations (and convert from total H to free Hprime)
    cl_i_amount, cl_o = ions_i_amount2[0], ions_o2[0]
    na_i_amount, na_o = ions_i_amount2[1], ions_o2[1]
    h_i_amount, h_o = ions_i_amount2[2], ions_o2[2]
    k_i_amount, k_o = ions_i_amount2[3], ions_o2[3]
    
    Buffer_T=buffer_capacity_T0*(V_t/V_t0)
    h_i = h_i_amount/(V_t*1000)

    # toggle buffering
    hprime_o =  h_o * buffer_capacity_T0
    hprime_i = h_i * Buffer_T

    A=A_from_V_const*(V_t**(2/3))
    C=A*c_spec
    Q = (na_i_amount + k_i_amount + h_i_amount - cl_i_amount + X_amount) * F
    U = Q / C 
    
    cl_i = cl_i_amount/(V_t*1000)
    na_i = na_i_amount/(V_t*1000)
    k_i = k_i_amount/(V_t*1000)

    pH_local=-np.log10(hprime_i)

    # compute potentials from different channels
    potential_asor = nernst_potential_Cl_asor(U, cl_o, cl_i, RTdivF)
    potential_CLC = nernst_potential_CLC(U, cl_i, cl_o, hprime_i, hprime_o, RT, F)
    n_potential_Na_TPC = nernst_potential_Na_K(U, na_o, na_i, RTdivF)
    potential_nhe = potential_NHE(na_o, na_i, hprime_i, hprime_o)
    potential_k=nernst_potential_Na_K(U, k_o, k_i, RTdivF)
    potential_Cl_OH=nernst_potential_Cl_OH(cl_o, cl_i, hprime_i, hprime_o)
    potential_VATPase=nernst_potential_VATPase(U, hprime_o, hprime_i, RTdivF)
    potential_H_leak = nernst_potential_H_leak(U, hprime_o, hprime_i, RTdivF)

    # unpack the conductances for the various channels
    g_asor, g_tpc, g_k, g_CLC, g_NHE, g_Cl_OH, g_ATPase, g_H_leak = conductances[0], conductances[1], conductances[2], conductances[3], conductances[4], conductances[5], conductances[6], conductances[7]

    # calculate flow of chloriDe (d[Cl]/dt)
    Cl_flux_asor = J_cl_asor(potential_asor, g_asor, U, pH_local, A)
    Cl_flux_CLC = J_Cl_CLC(potential_CLC, g_CLC, U, pH_local, A )
    Cl_flux_Cl_OH = J_Cl_OH(potential_Cl_OH, g_Cl_OH, A )

    dIons_dt[0] = Cl_flux_asor + Cl_flux_CLC + Cl_flux_Cl_OH

    # calculate flow of sodium (d[Na]/dt)
    na_flux_tpc = J_na_tpc(n_potential_Na_TPC, g_tpc, A)
    na_flux_nhe = J_Na_NHE(potential_nhe, g_NHE, A)

    dIons_dt[1] = na_flux_tpc + na_flux_nhe

    # calculate flow of H (d[H]/dt)
    H_flux_CLC = J_H_CLC(potential_CLC, g_CLC, U, pH_local, A)
    H_flux_NHE = J_H_NHE(potential_nhe,g_NHE,A)
    H_flux_Cl_OH = J_Cl_OH(potential_Cl_OH, g_Cl_OH, A )
    H_flux_VATPase=J_VATPase(potential_VATPase, g_ATPase, time_step, A)
    H_flux_leak = J_H_leak(potential_H_leak, g_H_leak, A)

    dIons_dt[2] = H_flux_CLC + H_flux_NHE + H_flux_Cl_OH + H_flux_VATPase + H_flux_leak

    # calculate flow of K (d[K]/dt)
    K_flux = J_k(potential_k, g_k, A)

    dIons_dt[3] = K_flux
    
    pH_dep_ASOR=pH_dependence_ASOR(pH_local)
    v_dep_ASOR=v_dependence_ASOR(U)
    
    pH_dep_ClC=pH_dependence_ClC(pH_local)
    v_dep_ClC=v_dependence_ClC(U)

    t_dep_VATPase=g_VATP_dependence(time_step)

    return dIons_dt, Cl_flux_asor, Cl_flux_CLC, Cl_flux_Cl_OH, na_flux_tpc, na_flux_nhe, H_flux_CLC, H_flux_NHE, H_flux_Cl_OH, H_flux_VATPase, H_flux_leak, K_flux, pH_dep_ASOR, v_dep_ASOR, pH_dep_ClC, v_dep_ClC, t_dep_VATPase, pH_local, A, C, Buffer_T

# %%
"""Define constants and do all calculations"""

number_of_ions=4
T = 1000 # total time (in seconds)
dt = 0.001 # duration of integration window (in seconds). Making this smaller ensures more numerical stability but will take longer 
t_axis = np.arange(0,T,dt) # the time axis, expressed in seconds and advancing in increments of 'dt'

## set up your initial conditions, constants, etc. below

# allocate some arrays to store the history of ionic concentrations (amounts?) and the history of volumes
Ion_concentrations_over_time = np.zeros((len(t_axis), number_of_ions)) # history of ion concentrations
Ion_amounts_over_time= np.zeros((len(t_axis), number_of_ions))
volume_over_time = np.zeros(len(t_axis)) # history of volumes 

# initialise constants related to the simulation
RT = 2578.5871 # gas constant x temperature in Kelvin
F = 96485.0 # Faraday constant
RTdivF=RT/F
c_spec = 0.01  # F/(m**2)
#buffer_capacity_t0=3.0*1e-5  # very crude measure
buffer_capacity_t0=5.0*1e-4 
U0 = 40*1e-3 # membrane potential in V 

r=1.3e-6 # radius of vesicle
V0 = (4.0/3.0) * np.pi * (r**3) # m3
volume_over_time[0] = V0
A0 = 4.0 * np.pi * (r**2) # surface area of vesicle
A_from_V_const=(36.0*np.pi)**(1/3)

C0 = A0 * c_spec

'''
imaging buffer concnetrations:
150mM NaCl 
1mM MgCl2 
1mM CaCl2 
5mM KCl 
20mM HEPES (pH=7.2)  
5mM glucose
Total pH=7.2 Osmolarity 320mOsm.
'''
# ++++++++++   INITIAL ION CONCENTRATIONS +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Cl_o_concentration = 20*1e-3
# Cl_i_concentration= 159*1e-3 #M
# Cl_i_concentration=1*1e-3 #M
Cl_i_concentration= 9*1e-3 #M

Na_o_concentration=10*1e-3 #M
Na_i_concentration=150*1e-3 #M

K_i_concentration=5*1e-3
K_o_concentration=140*1e-3

pH_o =  7.2
pH_i =  7.4

hprime_o_concentration = 10**(-pH_o)
hprime_i_concentration = 10**(-pH_i)

# TOGGLE BUFEERING
h_o_concentration = hprime_o_concentration/ buffer_capacity_t0
h_i_concentration = hprime_i_concentration/ buffer_capacity_t0

h_i_amount = h_i_concentration*V0*1000

Q0=U0*C0
X_amount=(Q0/F)-((Na_i_concentration+K_i_concentration+h_i_concentration-Cl_i_concentration)*V0*1000)
#X_amount = 6.347856428029419e-17
X_concentration=X_amount/(V0*1000)


ions_i, ions_o, ions_i_amount = np.zeros(4), np.zeros(4), np.zeros(4)

ions_i[0] = Cl_i_concentration
ions_o[0] = Cl_o_concentration

ions_i[1] = Na_i_concentration
ions_o[1] = Na_o_concentration

ions_i[2] = h_i_concentration
ions_o[2] = h_o_concentration

ions_i[3] = K_i_concentration
ions_o[3] = K_o_concentration


ions_i_amount[0] = Cl_i_concentration*V0*1000
ions_i_amount[1] = Na_i_concentration*V0*1000
ions_i_amount[2] = h_i_concentration*V0*1000
ions_i_amount[3] = K_i_concentration*V0*1000

Sum_initial_amounts = ions_i_amount[0] + ions_i_amount[1] + abs(X_amount) + ions_i_amount[3]

Ion_concentrations_over_time[0, :] = ions_i
Ion_amounts_over_time[0, :] = ions_i_amount

conductances = np.zeros(8)

# ********  set conductances (G values) for all transporters *********************************************************************************************
# #ClC SM1 100s
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 0, 0, 4*1e-6, 0, 0,0, 0) # actual

# #ASOR+ClC SM1 100s
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-6, 0, 0, 4*1e-6, 0, 0,0, 0) # actual

# #ASOR+TPC+ClC SM1
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-6, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #ASOR+TPC SM1
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-6, 1*1e-6, 0, 0, 0, 0,0, 0) # actual

# #TPC+ClC SM1
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #ClC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 0, 0, 5*1e-8, 0, 0,0, 0) # actual

# #ASOR+ClC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 0, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM2 TPC+ClC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM2 ASOR+TPC+ClC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM2 ASOR+TPC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 1*1e-6, 0, 0, 0, 0,0, 0) # actual

# #Basic parameters
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,4*1e-9, 0) # actual

# #ASOR+TPC+ClC+H-ATPase
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0, 4.0*1e-9, 0) # actual

# #ASOR+TPC+H-ATPase
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 1*1e-6, 0, 0, 0, 0, 4.0*1e-9, 0) # actual

# #5x ASOR+TPC+ClC+H-ATPase
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (2*1e-4, 1*1e-6, 0, 5*1e-8, 0, 0, 4.0*1e-9, 0) # actual

# #4x ASOR SM4
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (16*1e-6, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #2x ASOR SM4
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-6, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #1x ASOR SM4
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-6, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #0.5x ASOR SM4
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (2*1e-6, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #0.25x ASOR SM4
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (1*1e-6, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# #0x ASOR SM4
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 1*1e-6, 0, 4*1e-6, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 16x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (64*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 8x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (32*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 4x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (16*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 2x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 1x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (4*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 1/2x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (2*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 1/4x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (1*1e-5, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 1/8x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (5*1e-6, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 1/16x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (2.5*1e-6, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 1/32x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (1.25*1e-6, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM4 with pH- and V-dep 0x ASOR
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 1*1e-6, 0, 5*1e-8, 0, 0,0, 0) # actual

# # SM5a from 15.06.2021 ASOR+TPC+CLC+H-ATP+H-leak
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 10*1e-8, 0, 0, 8*1e-9, 16*1e-9) # actual

# # SM5b from 15.06.2021 TPC+CLC+H-ATP+H-leak
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 2*1e-6, 0, 10*1e-8, 0, 0, 8*1e-9, 16*1e-9) # actual

# # SM5c from 15.06.2021 TPC+CLC+H-leak
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 2*1e-6, 0, 10*1e-8, 0, 0, 0, 16*1e-9) # actual

# # SM5j from 15.06.2021 ASOR+TPC+H-leak
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 0, 0, 0, 0, 16*1e-9) # actual

# # SM5h from 15.06.2021 ASOR+TPC+CLC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 10*1e-8, 0, 0, 0, 0) # actual

# # SM5d from 15.06.2021 TPC+CLC
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (0, 2*1e-6, 0, 10*1e-8, 0, 0, 0, 0) # actual

# # SM5g from 15.06.2021 ASOR+TPC+CLC+H-ATP
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 10*1e-8, 0, 0, 8*1e-9, 0) # actual

# # SM5i from 15.06.2021 ASOR+TPC+H-ATP
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 0, 0, 0, 8*1e-9, 0) # actual

# # SM5e from 15.06.2021 ASOR+TPC+H-ATP+H-leak
# G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 0, 0, 0, 8*1e-9, 16*1e-9) # actual

# SM5f from 15.06.2021 ASOR+TPC+CLC+H-leak
G_asor, G_tpc, G_k, G_CLC, G_NHE, G_Cl_OH, G_VATPase, G_H_leak = (8*1e-5, 2*1e-6, 0, 10*1e-8, 0, 0, 0, 16*1e-9) # actual


conductances[0] = G_asor
conductances[1] = G_tpc
conductances[2] = G_k
conductances[3] = G_CLC
conductances[4] = G_NHE
conductances[5] = G_Cl_OH
conductances[6] = G_VATPase
conductances[7] = G_H_leak

Cl_FLUX_asor=np.zeros(len(t_axis)-1)
Cl_FLUX_CLC=np.zeros(len(t_axis)-1)
na_FLUX_tpc=np.zeros(len(t_axis)-1)   
na_FLUX_nhe=np.zeros(len(t_axis)-1)
H_FLUX_CLC=np.zeros(len(t_axis)-1)
H_FLUX_NHE=np.zeros(len(t_axis)-1)
K_FLUX=np.zeros(len(t_axis)-1)
Cl_FLUX_Cl_OH=np.zeros(len(t_axis)-1)
H_FLUX_Cl_OH = np.zeros(len(t_axis)-1)
H_FLUX_VATPase = np.zeros(len(t_axis)-1)
H_FLUX_leak = np.zeros(len(t_axis)-1)

# flux_histories = np.zeros((11, len(t_axis)-1))


# flux_history['Cl_asor'] = np.zeros(len(t_axis)-1)
# flux_histories[CL_asor_idx,t]

# CL_asor_idx = 0
# Cl_FLUX_CLC_idx = 1
# na_FLUX_tpc_idx = 2

Cl_FLUX_asor = my_big_array[CL_asor_idx, :]

ASOR_pH_dep=np.zeros(len(t_axis))
ASOR_voltage_dep=np.zeros(len(t_axis))
ASOR_pH_dep[0]=pH_dependence_ASOR(pH_i)
ASOR_voltage_dep[0]=v_dependence_ClC(U0)

VATPase_time_dep=np.zeros(len(t_axis))
VATPase_time_dep[0]=g_VATP_dependence(0)

ClC_pH_dep=np.zeros(len(t_axis))
ClC_voltage_dep=np.zeros(len(t_axis))
ClC_pH_dep[0]=pH_dependence_ClC(pH_i)
ClC_voltage_dep[0]=v_dependence_ClC(U0)

pH_over_time=np.zeros(len(Ion_concentrations_over_time))
area_over_time=np.zeros(len(Ion_concentrations_over_time))
capacity_over_time=np.zeros(len(Ion_concentrations_over_time))
buffer_over_time=np.zeros(len(Ion_concentrations_over_time))
pH_over_time[0]=pH_i
area_over_time[0]=A0
capacity_over_time[0]=C0
buffer_over_time[0]=buffer_capacity_t0

# integrate the system equations by looping over time 'by hand' rather than with ODEint

for t in range(1,len(t_axis)):

  # the two lines below is what odeint() is doing anyway (probably with some extra numerical methods to reduce risk of numerical instabilities), but we have to do it by hand since our V[t] is not being solved via ODE-integration
  dIons_dt, Cl_FLUX_asor[t-1], Cl_FLUX_CLC[t-1], Cl_FLUX_Cl_OH[t-1], na_FLUX_tpc[t-1], na_FLUX_nhe[t-1], H_FLUX_CLC[t-1], H_FLUX_NHE[t-1], H_FLUX_Cl_OH[t-1], H_FLUX_VATPase[t-1], H_FLUX_leak[t-1],  K_FLUX[t-1], ASOR_pH_dep[t], ASOR_voltage_dep[t], ClC_pH_dep[t], ClC_voltage_dep[t], VATPase_time_dep[t], pH_over_time[t], area_over_time[t], capacity_over_time[t], buffer_over_time[t] = compute_flows_v2(Ion_amounts_over_time[t-1, :], t_axis[t], ions_o, conductances, c_spec, V0, volume_over_time[t-1], X_amount, buffer_capacity_t0, A_from_V_const, RTdivF, RT, F) # get the derivative (flow)

  Ion_amounts_over_time[t, :] = Ion_amounts_over_time[t-1, :] + (dt * dIons_dt) # Euler integration i.e. x(t) = x(t-1) + (dt * dx(t)/dt)

  #cl_i_amount, na_i_amount = Ion_amounts_over_time[t, 0], Ion_amounts_over_time[t, 1] # extract the concentrations you just updated 
  volume_over_time[t] = (V0*(Ion_amounts_over_time[t, 0]+Ion_amounts_over_time[t,1]+Ion_amounts_over_time[t,3] + abs(X_amount)))/Sum_initial_amounts
  #volume_over_time[t]=V0  
  
  # the following alternative lines allow toggling between concentrations adjusted by osmotic shrinkage or not
  Ion_concentrations_over_time[t, :] = Ion_amounts_over_time[t, :] / (volume_over_time [t] *1000)
  # Ion_concentrations_over_time[t, :] = Ion_amounts_over_time[t, :] / V0




U_over_time=np.zeros(len(Ion_amounts_over_time))
for i in range(len(Ion_amounts_over_time)):
    Q2 = (Ion_amounts_over_time[i,1] +Ion_amounts_over_time[i,3] + Ion_amounts_over_time[i,2] - Ion_amounts_over_time[i,0] + X_amount) * F
    U_over_time[i] = Q2 / capacity_over_time[i]



# %% ***********************SM1***************************
import matplotlib 

new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)

#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(1,7, figsize = (30, 3), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

# axes[0].plot(t_axis,pH_over_time,color=u'#348ABD', linewidth=0.6)
axes[0].plot(t_axis,pH_over_time,color=u'#E24A33', linewidth=0.6)
# axes[0].set_title('pH', fontsize=20)
axes[0].set_ylim(4.5,8.5)
axes[0].set_xlim(0,T)
axes[0].spines['right'].set_visible(False)
axes[0].spines['top'].set_visible(False)
axes[0].spines['bottom'].set_linewidth(0.4)
axes[0].spines['left'].set_linewidth(0.4)
axes[0].spines['left'].set_position(('outward', 5))
axes[0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[2].plot(t_axis,volume_over_time*1e18, color=u'#348ABD', linewidth=0.6)
axes[2].plot(t_axis,volume_over_time*1e18, color=u'#E24A33', linewidth=0.6)
# axes[2].set_title('Volume', fontsize=20)
axes[2].set_ylim(1,10)
axes[2].set_xlim(0,T)
axes[2].spines['right'].set_visible(False)
axes[2].spines['top'].set_visible(False)
axes[2].spines['bottom'].set_linewidth(0.4)
axes[2].spines['left'].set_linewidth(0.4)
axes[2].spines['left'].set_position(('outward', 5))
axes[2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[2].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[2].set_xlabel('Time, s', fontname="Arial", fontsize =24)


# axes[1].plot(t_axis,U_over_time*1000, color=u'#348ABD', linewidth=0.6)
axes[1].plot(t_axis,U_over_time*1000, color=u'#E24A33', linewidth=0.6)
# axes[1].set_title('Membrane potential', fontsize=20)
axes[1].set_ylim(-80,60)
axes[1].set_xlim(0,T)
axes[1].spines['right'].set_visible(False)
axes[1].spines['top'].set_visible(False)
axes[1].spines['bottom'].set_linewidth(0.4)
axes[1].spines['left'].set_linewidth(0.4)
axes[1].spines['left'].set_position(('outward', 5))
axes[1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[1].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[3].plot(t_axis2,H_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
axes[3].plot(t_axis2,H_FLUX_CLC*1e19, color=u'#E24A33', linewidth=0.6)
# axes[3].set_title('H flux through ClC', fontsize=20)
axes[3].set_ylim(-20,6)
axes[3].set_xlim(0,T)
axes[3].spines['right'].set_visible(False)
axes[3].spines['top'].set_visible(False)
axes[3].spines['bottom'].set_linewidth(0.4)
axes[3].spines['left'].set_linewidth(0.4)
axes[3].spines['left'].set_position(('outward', 5))
axes[3].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[3].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[3].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[4].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
axes[4].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#E24A33', linewidth=0.6)
# axes[4].set_title('Cl flux through ClC', fontsize=20)
axes[4].set_ylim(-14,40)
axes[4].set_xlim(0,T)
axes[4].spines['right'].set_visible(False)
axes[4].spines['top'].set_visible(False)
axes[4].spines['bottom'].set_linewidth(0.4)
axes[4].spines['left'].set_linewidth(0.4)
axes[4].spines['left'].set_position(('outward', 5))
axes[4].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[4].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[4].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[5].plot(t_axis2,Cl_FLUX_asor*1e18, color=u'#348ABD', linewidth=0.6)
axes[5].plot(t_axis2,Cl_FLUX_asor*1e18, color=u'#E24A33', linewidth=0.6)
# axes[5].set_title('Cl flux through ASOR', fontsize=20)
axes[5].set_ylim(-1.5,2.7)
axes[5].set_xlim(0,T)
axes[5].spines['right'].set_visible(False)
axes[5].spines['top'].set_visible(False)
axes[5].spines['bottom'].set_linewidth(0.4)
axes[5].spines['left'].set_linewidth(0.4)
axes[5].spines['left'].set_position(('outward', 5))
axes[5].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[5].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[5].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[6].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#348ABD', linewidth=0.6)
axes[6].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#E24A33', linewidth=0.6)
# axes[6].set_title('Na flux through TPC', fontsize=20)
axes[6].set_ylim(-2.5,0.5)
axes[6].set_xlim(0,T)
axes[6].spines['right'].set_visible(False)
axes[6].spines['top'].set_visible(False)
axes[6].spines['bottom'].set_linewidth(0.4)
axes[6].spines['left'].set_linewidth(0.4)
axes[6].spines['left'].set_position(('outward', 5))
axes[6].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[6].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[6].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# # ClC
# #fig.delaxes(axes[3])
# #fig.delaxes(axes[4])
# fig.delaxes(axes[5])
# fig.delaxes(axes[6])

#ASOR+ClC
#fig.delaxes(axes[4])
#fig.delaxes(axes[5])
fig.delaxes(axes[6])

# #TPC+ClC
# # fig.delaxes(axes[4])
# fig.delaxes(axes[5])

# #ASOR + TPC + ClC
# #fig.delaxes(axes[3])

# # ASOR+TPC
# fig.delaxes(axes[3])
# fig.delaxes(axes[4])


# plt.savefig(os.path.join('SM1 ClC.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 ASOR_ClC.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 TPC+ClC.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 ASOR+TPC+ClC.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 ASOR+TPC.svg'), transparent=True)


# plt.savefig(os.path.join('SM1 ClC 1mM Cl.svg'), transparent=True)
plt.savefig(os.path.join('SM1 ASOR_ClC 1mM Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 TPC+ClC 1mM Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 ASOR+TPC+ClC 1mM Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM1 ASOR+TPC 1mM Cl.svg'), transparent=True)























#%%
#*****************************SM2 voltage and pH dependence******************************
import matplotlib 

# alkaline shifted and wider pH dependence
def pH_dependence_ASOR_wider(pH):
    return 1.0 / (1.0 + np.exp(1.0*(pH-7.4)))

pH_step=0.1
pH_start=1
pH_end=12
voltage_step=5*1e-3
voltage_start=-100*1e-3
voltage_end=100*1e-3

pH_axis = np.arange(pH_start, pH_end, pH_step)
voltage_axis = np.arange(voltage_start, voltage_end, voltage_step)

pH_values_ASOR=np.zeros(len(pH_axis))
pH_values_ASOR_wider=np.zeros(len(pH_axis))
U_values_ASOR=np.zeros(len(voltage_axis))
pH_values_ClC=np.zeros(len(pH_axis))
U_values_ClC=np.zeros(len(voltage_axis))

pH = pH_start
for i in range(len(pH_axis)):
  pH = pH + pH_step
  pH_values_ASOR[i] = pH_dependence_ASOR(pH)
  pH_values_ClC[i] = pH_dependence_ClC(pH)
  pH_values_ASOR_wider[i]=pH_dependence_ASOR_wider(pH)

for i in range(len(voltage_axis)):
  U_values_ASOR[i]=v_dependence_ASOR(voltage_axis[i])
  U_values_ClC[i]=v_dependence_ClC(voltage_axis[i])

fig,axes = plt.subplots(2,2, figsize = (10,10))
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"


axes[0,0].plot(pH_axis,pH_values_ClC, color=u'#348ABD', linewidth=0.6)
axes[0,0].set_title('ClC', fontsize=20, pad=25, fontname="Arial")
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24, labelpad=25)
axes[0,0].set_xlabel('pH', fontname="Arial", fontsize =18)
axes[0,0].set_xticks(np.arange(2, 13, 2.0))

line,=axes[0,1].plot(pH_axis,pH_values_ASOR, color=u'#348ABD', linewidth=0.6, label='ASOR wild-type')
line,=axes[0,1].plot(pH_axis,pH_values_ASOR_wider, color=u'#E24A33', linewidth=0.6, label='pH-shifted ASOR mutant')
axes[0,1].set_title('ASOR', fontsize=20, pad=25, fontname="Arial")
axes[0,1].spines['right'].set_visible(False)
axes[0,1].spines['top'].set_visible(False)
axes[0,1].spines['bottom'].set_linewidth(0.4)
axes[0,1].spines['left'].set_linewidth(0.4)
axes[0,1].spines['left'].set_position(('outward', 5))
axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0,1].set_xlabel('pH', fontname="Arial", fontsize =18)
axes[0,1].set_xticks(np.arange(2, 13, 2.0))
axes[0,1].legend(loc=1, bbox_to_anchor=(0.8, 0.5, 0.5, 0.5), fontsize=14, frameon=False)

# axes[0,2].plot(pH_axis,pH_values_ASOR_wider, color=u'#348ABD', linewidth=0.6)
# axes[0,2].set_title('pH-shifted ASOR mutant', fontsize=20, pad=25, fontname="Arial")
# axes[0,2].spines['right'].set_visible(False)
# axes[0,2].spines['top'].set_visible(False)
# axes[0,2].spines['bottom'].set_linewidth(0.4)
# axes[0,2].spines['left'].set_linewidth(0.4)
# axes[0,2].spines['left'].set_position(('outward', 5))
# axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# # axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
# axes[0,2].set_xlabel('pH', fontname="Arial", fontsize =18)
# axes[0,2].set_xticks(np.arange(2, 13, 2.0))

axes[1,0].plot(voltage_axis*1000,U_values_ClC, color=u'#348ABD', linewidth=0.6)
# axes[1,0].set_title('ClC voltage-dependence', fontsize=20)
axes[1,0].spines['right'].set_visible(False)
axes[1,0].spines['top'].set_visible(False)
axes[1,0].spines['bottom'].set_linewidth(0.4)
axes[1,0].spines['left'].set_linewidth(0.4)
axes[1,0].spines['left'].set_position(('outward', 5))
axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,0].set_ylabel('Voltage', fontname="Arial", fontsize =24, labelpad=25)
axes[1,0].set_xlabel('U, mV', fontname="Arial", fontsize =18)

axes[1,1].plot(voltage_axis*1000,U_values_ASOR, color=u'#348ABD', linewidth=0.6)
# axes[1,1].set_title('ASOR', fontsize=20)
axes[1,1].spines['right'].set_visible(False)
axes[1,1].spines['top'].set_visible(False)
axes[1,1].spines['bottom'].set_linewidth(0.4)
axes[1,1].spines['left'].set_linewidth(0.4)
axes[1,1].spines['left'].set_position(('outward', 5))
axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[1,1].set_xlabel('U, mV', fontname="Arial", fontsize =18)

# axes[1,2].plot(voltage_axis*1000,U_values_ASOR, color=u'#348ABD', linewidth=0.6)
# # axes[1,1].set_title('ASOR', fontsize=20)
# axes[1,2].spines['right'].set_visible(False)
# axes[1,2].spines['top'].set_visible(False)
# axes[1,2].spines['bottom'].set_linewidth(0.4)
# axes[1,2].spines['left'].set_linewidth(0.4)
# axes[1,2].spines['left'].set_position(('outward', 5))
# axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# # axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
# axes[1,2].set_xlabel('U, mV', fontname="Arial", fontsize =18)


plt.subplots_adjust(wspace=None, hspace=0.35)

plt.savefig(os.path.join('SM2 pH- and V-dependences.svg'))












#%%
#*****************************SM2 without H-ATPase******************************

import matplotlib 
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(1,6, figsize = (30, 3), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

axes[0].plot(t_axis,pH_over_time,color=u'#348ABD', linewidth=0.6)
# axes[0].set_title('pH', fontsize=20)
axes[0].set_ylim(5.0,7.5)
axes[0].set_xlim(0,1000)
axes[0].spines['right'].set_visible(False)
axes[0].spines['top'].set_visible(False)
axes[0].spines['bottom'].set_linewidth(0.4)
axes[0].spines['left'].set_linewidth(0.4)
axes[0].spines['left'].set_position(('outward', 5))
axes[0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1].plot(t_axis,volume_over_time*1e18, color=u'#348ABD', linewidth=0.6)
# axes[1].set_title('Volume', fontsize=20)
axes[1].set_ylim(0,10)
axes[1].set_xlim(0,1000)
axes[1].spines['right'].set_visible(False)
axes[1].spines['top'].set_visible(False)
axes[1].spines['bottom'].set_linewidth(0.4)
axes[1].spines['left'].set_linewidth(0.4)
axes[1].spines['left'].set_position(('outward', 5))
axes[1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[1].set_xlabel('Time, s', fontname="Arial", fontsize =24)


axes[2].plot(t_axis,U_over_time*1000, color=u'#348ABD', linewidth=0.6)
# axes[2].set_title('Membrane potential', fontsize=20)
axes[2].set_ylim(-70,40)
axes[2].set_xlim(0,1000)
axes[2].spines['right'].set_visible(False)
axes[2].spines['top'].set_visible(False)
axes[2].spines['bottom'].set_linewidth(0.4)
axes[2].spines['left'].set_linewidth(0.4)
axes[2].spines['left'].set_position(('outward', 5))
axes[2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[2].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[3].plot(t_axis2,Cl_FLUX_asor*1e19, color=u'#348ABD', linewidth=0.6)
# axes[5].set_title('Cl flux through ASOR', fontsize=20)
axes[3].set_ylim(-9.0, 0)
axes[3].set_xlim(0,1000)
axes[3].spines['right'].set_visible(False)
axes[3].spines['top'].set_visible(False)
axes[3].spines['bottom'].set_linewidth(0.4)
axes[3].spines['left'].set_linewidth(0.4)
axes[3].spines['left'].set_position(('outward', 5))
axes[3].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[3].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[3].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[4].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
# axes[4].set_title('Cl flux through ClC', fontsize=20)
axes[4].set_ylim(-2.0, 0)
axes[4].set_xlim(0,1000)
axes[4].spines['right'].set_visible(False)
axes[4].spines['top'].set_visible(False)
axes[4].spines['bottom'].set_linewidth(0.4)
axes[4].spines['left'].set_linewidth(0.4)
axes[4].spines['left'].set_position(('outward', 5))
axes[4].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[4].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[4].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[5].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#348ABD', linewidth=0.6)
# axes[6].set_title('Na flux through TPC', fontsize=20)
axes[5].set_ylim(-2.5,0)
axes[5].set_xlim(0,1000)
axes[5].spines['right'].set_visible(False)
axes[5].spines['top'].set_visible(False)
axes[5].spines['bottom'].set_linewidth(0.4)
axes[5].spines['left'].set_linewidth(0.4)
axes[5].spines['left'].set_position(('outward', 5))
axes[5].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[5].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[5].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# plt.legend(['ASOR+TPC+ClC'], loc=0, bbox_to_anchor=(0, 0.1, 0.5, 0.5), fontsize=20, frameon=False)

plt.savefig(os.path.join('SM2 ASOR+TPC+ClC no H-ATPase.svg'), transparent=True)
# plt.savefig(os.path.join('SM2 ASOR+TPC no H-ATPase.svg'), transparent=True)

























#%%
#*******************SM2 TPC and ClC overlay****************+

import matplotlib 
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(1,6, figsize = (30, 3), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

axes[0].plot(t_axis,pH_over_time,color=u'#E24A33', linewidth=0.6)
# axes[0].set_title('pH', fontsize=20)
axes[0].set_ylim(5.0,7.5)
axes[0].set_xlim(0,1000)
axes[0].spines['right'].set_visible(False)
axes[0].spines['top'].set_visible(False)
axes[0].spines['bottom'].set_linewidth(0.4)
axes[0].spines['left'].set_linewidth(0.4)
axes[0].spines['left'].set_position(('outward', 5))
axes[0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1].plot(t_axis,volume_over_time*1e18, color=u'#E24A33', linewidth=0.6)
# axes[1].set_title('Volume', fontsize=20)
axes[1].set_ylim(0,10)
axes[1].set_xlim(0,1000)
axes[1].spines['right'].set_visible(False)
axes[1].spines['top'].set_visible(False)
axes[1].spines['bottom'].set_linewidth(0.4)
axes[1].spines['left'].set_linewidth(0.4)
axes[1].spines['left'].set_position(('outward', 5))
axes[1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[1].set_xlabel('Time, s', fontname="Arial", fontsize =24)


axes[2].plot(t_axis,U_over_time*1000, color=u'#E24A33', linewidth=0.6)
# axes[2].set_title('Membrane potential', fontsize=20)
axes[2].set_ylim(-70,40)
axes[2].set_xlim(0,1000)
axes[2].spines['right'].set_visible(False)
axes[2].spines['top'].set_visible(False)
axes[2].spines['bottom'].set_linewidth(0.4)
axes[2].spines['left'].set_linewidth(0.4)
axes[2].spines['left'].set_position(('outward', 5))
axes[2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[2].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[3].plot(t_axis2,Cl_FLUX_asor*1e19, color=u'#E24A33', linewidth=0.6)
# axes[5].set_title('Cl flux through ASOR', fontsize=20)
axes[3].set_ylim(-9.0, 0)
axes[3].set_xlim(0,1000)
axes[3].spines['right'].set_visible(False)
axes[3].spines['top'].set_visible(False)
axes[3].spines['bottom'].set_linewidth(0.4)
axes[3].spines['left'].set_linewidth(0.4)
axes[3].spines['left'].set_position(('outward', 5))
axes[3].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[3].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[3].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[4].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#E24A33', linewidth=0.6)
# axes[4].set_title('Cl flux through ClC', fontsize=20)
axes[4].set_ylim(-2.0, 0)
axes[4].set_xlim(0,1000)
axes[4].spines['right'].set_visible(False)
axes[4].spines['top'].set_visible(False)
axes[4].spines['bottom'].set_linewidth(0.4)
axes[4].spines['left'].set_linewidth(0.4)
axes[4].spines['left'].set_position(('outward', 5))
axes[4].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[4].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[4].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[5].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#E24A33', linewidth=0.6)
# axes[6].set_title('Na flux through TPC', fontsize=20)
axes[5].set_ylim(-2.5,0)
axes[5].set_xlim(0,1000)
axes[5].spines['right'].set_visible(False)
axes[5].spines['top'].set_visible(False)
axes[5].spines['bottom'].set_linewidth(0.4)
axes[5].spines['left'].set_linewidth(0.4)
axes[5].spines['left'].set_position(('outward', 5))
axes[5].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[5].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[5].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# plt.legend(['TPC+ClC'], loc=1, bbox_to_anchor=(1.3, 0.3, 0.5, 0.5), fontsize=20, frameon=False)
plt.savefig(os.path.join('SM2 TPC+ClC no H-ATPase.svg'), transparent=True)













#%%
#*****************************SM3 with H-ATPase******************************

import matplotlib 
new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(2,5, figsize = (28, 8), sharex = True)
plt.subplots_adjust(wspace=0.55, hspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "Arial"

axes[0,0].plot(t_axis,pH_over_time,color=u'#348ABD', linewidth=0.6)
axes[0,0].set_title('pH', fontsize=20, pad=20)
axes[0,0].set_ylim(5.0,7.5)
axes[0,0].set_xlim(0,1000)
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0,0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[0,1].plot(t_axis,volume_over_time*1e18, color=u'#348ABD', linewidth=0.6)
axes[0,1].set_title('Volume', fontsize=20, pad=20)
axes[0,1].set_ylim(0,10)
axes[0,1].set_xlim(0,1000)
axes[0,1].spines['right'].set_visible(False)
axes[0,1].spines['top'].set_visible(False)
axes[0,1].spines['bottom'].set_linewidth(0.4)
axes[0,1].spines['left'].set_linewidth(0.4)
axes[0,1].spines['left'].set_position(('outward', 5))
axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,1].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[0,1].set_xlabel('Time, s', fontname="Arial", fontsize =24)


axes[0,2].plot(t_axis,U_over_time*1000, color=u'#348ABD', linewidth=0.6)
axes[0,2].set_title('Membrane potential', fontsize=20, pad=20)
axes[0,2].set_ylim(-70,40)
axes[0,2].set_xlim(0,1000)
axes[0,2].spines['right'].set_visible(False)
axes[0,2].spines['top'].set_visible(False)
axes[0,2].spines['bottom'].set_linewidth(0.4)
axes[0,2].spines['left'].set_linewidth(0.4)
axes[0,2].spines['left'].set_position(('outward', 5))
axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,2].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[0,2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,0].plot(t_axis2,Cl_FLUX_asor*1e19, color=u'#348ABD', linewidth=0.6)
axes[1,0].set_title('Cl$^-$ flux through ASOR', fontsize=20, pad=20)
axes[1,0].set_ylim(-20.0, 0)
axes[1,0].set_xlim(0,1000)
axes[1,0].spines['right'].set_visible(False)
axes[1,0].spines['top'].set_visible(False)
axes[1,0].spines['bottom'].set_linewidth(0.4)
axes[1,0].spines['left'].set_linewidth(0.4)
axes[1,0].spines['left'].set_position(('outward', 5))
axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,0].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[1,0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,1].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
axes[1,1].set_title('Cl$^-$ flux through ClC', fontsize=20, pad=20)
axes[1,1].set_ylim(-2.0, 0)
axes[1,1].set_xlim(0,1000)
axes[1,1].spines['right'].set_visible(False)
axes[1,1].spines['top'].set_visible(False)
axes[1,1].spines['bottom'].set_linewidth(0.4)
axes[1,1].spines['left'].set_linewidth(0.4)
axes[1,1].spines['left'].set_position(('outward', 5))
axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,1].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[1,1].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,2].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#348ABD', linewidth=0.6)
axes[1,2].set_title('Na$^+$ flux through TPC', fontsize=20, pad=20)
axes[1,2].set_ylim(-2.5,0)
axes[1,2].set_xlim(0,1000)
axes[1,2].spines['right'].set_visible(False)
axes[1,2].spines['top'].set_visible(False)
axes[1,2].spines['bottom'].set_linewidth(0.4)
axes[1,2].spines['left'].set_linewidth(0.4)
axes[1,2].spines['left'].set_position(('outward', 5))
axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,2].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[1,2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,3].plot(t_axis2,H_FLUX_CLC*1e20, color=u'#348ABD', linewidth=0.6)
axes[1,3].set_title('H$^+$ flux through ClC', fontsize=20, pad=20)
axes[1,3].set_ylim(-0.5,7)
axes[1,3].set_xlim(0,1000)
axes[1,3].spines['right'].set_visible(False)
axes[1,3].spines['top'].set_visible(False)
axes[1,3].spines['bottom'].set_linewidth(0.4)
axes[1,3].spines['left'].set_linewidth(0.4)
axes[1,3].spines['left'].set_position(('outward', 5))
axes[1,3].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,3].set_ylabel('mol*s$^{-1}$, $10^{-20}$', fontname="Arial", fontsize =24)
axes[1,3].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,4].plot(t_axis2,H_FLUX_VATPase*1e20, color=u'#348ABD', linewidth=0.6)
axes[1,4].set_title('H$^+$ flux through V-ATPase', fontsize=20, pad=20)
axes[1,4].set_ylim(0,1.6)
axes[1,4].set_xlim(0,1000)
axes[1,4].spines['right'].set_visible(False)
axes[1,4].spines['top'].set_visible(False)
axes[1,4].spines['bottom'].set_linewidth(0.4)
axes[1,4].spines['left'].set_linewidth(0.4)
axes[1,4].spines['left'].set_position(('outward', 5))
axes[1,4].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,4].set_ylabel('mol*s$^{-1}$, $10^{-20}$', fontname="Arial", fontsize =24)
axes[1,4].set_xlabel('Time, s', fontname="Arial", fontsize =24)

fig.delaxes(axes[0,3])
fig.delaxes(axes[0,4])

# plt.legend(['ASOR+TPC+ClC'], loc=0, bbox_to_anchor=(0, 0.1, 0.5, 0.5), fontsize=20, frameon=False)

# plt.savefig(os.path.join('SM2 ASOR+TPC+ClC+H-ATPase.svg'), transparent=True)
plt.savefig(os.path.join('SM2 ASOR+TPC+H-ATPase.svg'), transparent=True)























#%%
#*****************************SM3 with H-ATPase 2nd part with 5x asor******************************

import matplotlib 
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(2,5, figsize = (28, 8), sharex = True)
plt.subplots_adjust(wspace=0.55, hspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "Arial"

axes[0,0].plot(t_axis,pH_over_time,color=u'#348ABD', linewidth=0.6)
axes[0,0].set_title('pH', fontsize=20, pad=20)
axes[0,0].set_ylim(5.0,7.5)
axes[0,0].set_xlim(0,1000)
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0,0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[0,1].plot(t_axis,volume_over_time*1e18, color=u'#348ABD', linewidth=0.6)
axes[0,1].set_title('Volume', fontsize=20, pad=20)
axes[0,1].set_ylim(0,10)
axes[0,1].set_xlim(0,1000)
axes[0,1].spines['right'].set_visible(False)
axes[0,1].spines['top'].set_visible(False)
axes[0,1].spines['bottom'].set_linewidth(0.4)
axes[0,1].spines['left'].set_linewidth(0.4)
axes[0,1].spines['left'].set_position(('outward', 5))
axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,1].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[0,1].set_xlabel('Time, s', fontname="Arial", fontsize =24)


axes[0,2].plot(t_axis,U_over_time*1000, color=u'#348ABD', linewidth=0.6)
axes[0,2].set_title('Membrane potential', fontsize=20, pad=20)
axes[0,2].set_ylim(-70,40)
axes[0,2].set_xlim(0,1000)
axes[0,2].spines['right'].set_visible(False)
axes[0,2].spines['top'].set_visible(False)
axes[0,2].spines['bottom'].set_linewidth(0.4)
axes[0,2].spines['left'].set_linewidth(0.4)
axes[0,2].spines['left'].set_position(('outward', 5))
axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,2].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[0,2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,0].plot(t_axis2,Cl_FLUX_asor*1e19, color=u'#348ABD', linewidth=0.6)
axes[1,0].set_title('Cl$^-$ flux through ASOR', fontsize=20, pad=20)
axes[1,0].set_ylim(-20.0, 0)
axes[1,0].set_xlim(0,1000)
axes[1,0].spines['right'].set_visible(False)
axes[1,0].spines['top'].set_visible(False)
axes[1,0].spines['bottom'].set_linewidth(0.4)
axes[1,0].spines['left'].set_linewidth(0.4)
axes[1,0].spines['left'].set_position(('outward', 5))
axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,0].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[1,0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,1].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
axes[1,1].set_title('Cl$^-$ flux through ClC', fontsize=20, pad=20)
axes[1,1].set_ylim(-2.0, 0)
axes[1,1].set_xlim(0,1000)
axes[1,1].spines['right'].set_visible(False)
axes[1,1].spines['top'].set_visible(False)
axes[1,1].spines['bottom'].set_linewidth(0.4)
axes[1,1].spines['left'].set_linewidth(0.4)
axes[1,1].spines['left'].set_position(('outward', 5))
axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,1].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[1,1].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,2].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#348ABD', linewidth=0.6)
axes[1,2].set_title('Na$^+$ flux through TPC', fontsize=20, pad=20)
axes[1,2].set_ylim(-2.5,0)
axes[1,2].set_xlim(0,1000)
axes[1,2].spines['right'].set_visible(False)
axes[1,2].spines['top'].set_visible(False)
axes[1,2].spines['bottom'].set_linewidth(0.4)
axes[1,2].spines['left'].set_linewidth(0.4)
axes[1,2].spines['left'].set_position(('outward', 5))
axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,2].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[1,2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,3].plot(t_axis2,H_FLUX_CLC*1e20, color=u'#348ABD', linewidth=0.6)
axes[1,3].set_title('H$^+$ flux through ClC', fontsize=20, pad=20)
axes[1,3].set_ylim(-0.5,7)
axes[1,3].set_xlim(0,1000)
axes[1,3].spines['right'].set_visible(False)
axes[1,3].spines['top'].set_visible(False)
axes[1,3].spines['bottom'].set_linewidth(0.4)
axes[1,3].spines['left'].set_linewidth(0.4)
axes[1,3].spines['left'].set_position(('outward', 5))
axes[1,3].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,3].set_ylabel('mol*s$^{-1}$, $10^{-20}$', fontname="Arial", fontsize =24)
axes[1,3].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[1,4].plot(t_axis2,H_FLUX_VATPase*1e20, color=u'#348ABD', linewidth=0.6)
axes[1,4].set_title('H$^+$ flux through V-ATPase', fontsize=20, pad=20)
axes[1,4].set_ylim(0,1.6)
axes[1,4].set_xlim(0,1000)
axes[1,4].spines['right'].set_visible(False)
axes[1,4].spines['top'].set_visible(False)
axes[1,4].spines['bottom'].set_linewidth(0.4)
axes[1,4].spines['left'].set_linewidth(0.4)
axes[1,4].spines['left'].set_position(('outward', 5))
axes[1,4].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,4].set_ylabel('mol*s$^{-1}$, $10^{-20}$', fontname="Arial", fontsize =24)
axes[1,4].set_xlabel('Time, s', fontname="Arial", fontsize =24)

fig.delaxes(axes[0,3])
fig.delaxes(axes[0,4])

# plt.legend(['ASOR+TPC+ClC'], loc=0, bbox_to_anchor=(0, 0.1, 0.5, 0.5), fontsize=20, frameon=False)

# plt.savefig(os.path.join('SM2 ASOR+TPC+ClC+H-ATPase 5 more ASOR.svg'), transparent=True)
plt.savefig(os.path.join('SM2 ASOR+TPC+ClC+H-ATPase 5 more ASOR and pH shift.svg'), transparent=True)




























# %%
########################  SM4 Different ASOR amounts no pH- and V- dependencies  ###########

import matplotlib 
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(1,3, figsize = (10, 3), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

axes[0].plot(t_axis,pH_over_time,color="red", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="orange", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="green", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="deepskyblue", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="mediumblue", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="magenta", linewidth=0.6)
# axes[0].set_title('pH', fontsize=20)
axes[0].set_ylim(4.5,7.5)
axes[0].set_xlim(0,T)
axes[0].spines['right'].set_visible(False)
axes[0].spines['top'].set_visible(False)
axes[0].spines['bottom'].set_linewidth(0.4)
axes[0].spines['left'].set_linewidth(0.4)
axes[0].spines['left'].set_position(('outward', 5))
axes[0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

axes[2].plot(t_axis,volume_over_time*1e18, color="red", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="orange", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="green", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="deepskyblue", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="mediumblue", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="magenta", linewidth=0.6)
# axes[2].set_title('Volume', fontsize=20)
axes[2].set_ylim(1,10)
axes[2].set_xlim(0,T)
axes[2].spines['right'].set_visible(False)
axes[2].spines['top'].set_visible(False)
axes[2].spines['bottom'].set_linewidth(0.4)
axes[2].spines['left'].set_linewidth(0.4)
axes[2].spines['left'].set_position(('outward', 5))
axes[2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[2].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[2].set_xlabel('Time, s', fontname="Arial", fontsize =24)


axes[1].plot(t_axis,U_over_time*1000, color="red", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="orange", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="green", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="deepskyblue", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="mediumblue", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="magenta", linewidth=0.6)
# axes[1].set_title('Membrane potential', fontsize=20)
axes[1].set_ylim(-30,45)
axes[1].set_xlim(0,T)
axes[1].spines['right'].set_visible(False)
axes[1].spines['top'].set_visible(False)
axes[1].spines['bottom'].set_linewidth(0.4)
axes[1].spines['left'].set_linewidth(0.4)
axes[1].spines['left'].set_position(('outward', 5))
axes[1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[1].set_xlabel('Time, s', fontname="Arial", fontsize =24)

plt.legend(['0x ASOR'], loc=0, fontsize=20, frameon=False)


# plt.savefig(os.path.join('SM4 4x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 2x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 1x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 0.5x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 0.25x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 0x ASOR.svg'), transparent=True)



























# %%
########################  Different ASOR amounts with pH- and V- dependences ###########

import matplotlib 
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(1,3, figsize = (10, 3), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

# axes[0].plot(t_axis,pH_over_time,color="red", linewidth=0.6)
axes[0].plot(t_axis,pH_over_time,color="orange", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="olive", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="green", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time, color="teal", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="deepskyblue", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="slategray", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="mediumblue", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="magenta", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="palevioletred", linewidth=0.6)
# axes[0].plot(t_axis,pH_over_time,color="black", linewidth=0.6)
# axes[0].set_title('pH', fontsize=20)
axes[0].set_ylim(5.5,7.5)
axes[0].set_xlim(0,T)
axes[0].spines['right'].set_visible(False)
axes[0].spines['top'].set_visible(False)
axes[0].spines['bottom'].set_linewidth(0.4)
axes[0].spines['left'].set_linewidth(0.4)
axes[0].spines['left'].set_position(('outward', 5))
axes[0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[2].plot(t_axis,volume_over_time*1e18, color="red", linewidth=0.6)
axes[2].plot(t_axis,volume_over_time*1e18, color="orange", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18,color="olive", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="green", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="teal", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="deepskyblue", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="slategray", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="mediumblue", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="magenta", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="palevioletred", linewidth=0.6)
# axes[2].plot(t_axis,volume_over_time*1e18, color="black", linewidth=0.6)

# axes[2].set_title('Volume', fontsize=20)
axes[2].set_ylim(3.0,10)
axes[2].set_xlim(0,T)
axes[2].spines['right'].set_visible(False)
axes[2].spines['top'].set_visible(False)
axes[2].spines['bottom'].set_linewidth(0.4)
axes[2].spines['left'].set_linewidth(0.4)
axes[2].spines['left'].set_position(('outward', 5))
axes[2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[2].set_ylabel(' $\mathregular{um^3}$', fontname="Arial", fontsize =24)
axes[2].set_xlabel('Time, s', fontname="Arial", fontsize =24)


# axes[1].plot(t_axis,U_over_time*1000, color="red", linewidth=0.6)
axes[1].plot(t_axis,U_over_time*1000, color="orange", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000,color="olive", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="green", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="teal", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="deepskyblue", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="slategray", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="mediumblue", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="magenta", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="palevioletred", linewidth=0.6)
# axes[1].plot(t_axis,U_over_time*1000, color="black", linewidth=0.6)
# axes[1].set_title('Membrane potential', fontsize=20)
axes[1].set_ylim(-70,45)
axes[1].set_xlim(0,T)
axes[1].spines['right'].set_visible(False)
axes[1].spines['top'].set_visible(False)
axes[1].spines['bottom'].set_linewidth(0.4)
axes[1].spines['left'].set_linewidth(0.4)
axes[1].spines['left'].set_position(('outward', 5))
axes[1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[1].set_xlabel('Time, s', fontname="Arial", fontsize =24)

plt.legend(['8x ASOR'], loc=0, fontsize=20, frameon=False)


# plt.savefig(os.path.join('SM4.5 16x ASOR.svg'), transparent=True)
plt.savefig(os.path.join('SM4.5 8x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 4x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 2x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 1x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 1.2x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 1.4x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 1.8x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 1.16x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 1.32x ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4.5 0x ASOR.svg'), transparent=True)




















 
 


# %%
########################  Different ASOR amounts with pH- and V- dependences exporting at certain time points###########
t1=int((400/dt)-1)
t2=int((600/dt)-1)
ASOR_dep_product=ASOR_pH_dep*ASOR_voltage_dep
row1=['0x ASOR expression', G_asor]
row2=[t1, pH_over_time[t1], volume_over_time[t1]*1e18, U_over_time[t1], ASOR_pH_dep[t1], ASOR_voltage_dep[t1], ASOR_dep_product[t1]]
row3=[t2, pH_over_time[t2], volume_over_time[t2]*1e18, U_over_time[t2], ASOR_pH_dep[t2], ASOR_voltage_dep[t2], ASOR_dep_product[t2]]
import os
import csv
date_dir='Y:/group/mzeziulia/macrophages/BMDM/BMDMS macropinocytosis/paper/model stuff/exported data'
csv_name = os.path.join(date_dir,'SM4 dVdt at 500ms as 600ms-400ms volume.csv')
row_list = ['time','pH', 'Volume', 'Membrane potential', 'fASOR(U)', 'fASOR(pH)', 'fASOR(U*pH)']
with open(csv_name, 'a', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(row_list)

with open(csv_name, 'a', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(row1)
    writer.writerow(row2)
    writer.writerow(row3)


# %% Reading in the dataframe
import pandas as pd

df = pd.read_csv('Y:/group/mzeziulia/macrophages/BMDM/BMDMS macropinocytosis/paper/model stuff/exported data/SM4 ASOR expression at 500 and 1000.csv', delimiter=';')

pH_vs_ASOR_500=np.zeros(11)
V_vs_ASOR_500=np.zeros(11)
U_vs_ASOR_500=np.zeros(11)
fU_vs_ASOR_500=np.zeros(11)
fpH_vs_ASOR_500=np.zeros(11)
fUpH_vs_ASOR_500=np.zeros(11)

pH_vs_ASOR_1000=np.zeros(11)
V_vs_ASOR_1000=np.zeros(11)
U_vs_ASOR_1000=np.zeros(11)
fU_vs_ASOR_1000=np.zeros(11)
fpH_vs_ASOR_1000=np.zeros(11)
fUpH_vs_ASOR_1000=np.zeros(11)

for i in range(len(df)):
    if df['time'][i]==499999:
        j=int(i/2)
        pH_vs_ASOR_500[j]=df['pH'][i]
        V_vs_ASOR_500[j]=df['Volume'][i]
        U_vs_ASOR_500[j]=df['Membrane potential'][i]
        fU_vs_ASOR_500[j]=df['fASOR(U)'][i]
        fpH_vs_ASOR_500[j]=df['fASOR(pH)'][i]
        fUpH_vs_ASOR_500[j]=df['fASOR(U*pH)'][i]
    elif df['time'][i]==999999:
        k=int((i-1)/2)
        pH_vs_ASOR_1000[k]=df['pH'][i]
        V_vs_ASOR_1000[k]=df['Volume'][i]
        U_vs_ASOR_1000[k]=df['Membrane potential'][i]
        fU_vs_ASOR_1000[k]=df['fASOR(U)'][i]
        fpH_vs_ASOR_1000[k]=df['fASOR(pH)'][i]
        fUpH_vs_ASOR_1000[k]=df['fASOR(U*pH)'][i]

# rate=(V_vs_ASOR_1000-V_vs_ASOR_500)/199

# %% Plotting linear

import matplotlib 
new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)

t_axis=[df["Expression level"][0], df["Expression level"][2], df["Expression level"][4], df["Expression level"][6], df["Expression level"][8], df["Expression level"][10], df["Expression level"][12], df["Expression level"][14], df["Expression level"][16], df["Expression level"][18], df["Expression level"][20]]
t_axis_array=np.array(t_axis)

fig,axes = plt.subplots(2,3, figsize = (15, 7), sharex = False)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

plt.subplots_adjust(hspace=0.3)

# axes[0,0].set_title('pH', fontsize=20)
# # axes[0,0].plot(t_axis_array*1e4,pH_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[0,0].plot(t_axis_array*1e4,pH_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# # axes[0,0].set_ylim(5.5,7.5)
# # axes[0,0].set_xlim(0,T)
# axes[0,0].spines['right'].set_visible(False)
# axes[0,0].spines['top'].set_visible(False)
# axes[0,0].spines['bottom'].set_linewidth(0.4)
# axes[0,0].spines['left'].set_linewidth(0.4)
# axes[0,0].spines['left'].set_position(('outward', 5))
# axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
# # axes[0,0].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

# axes[0,1].set_title('Membrane potential', fontsize=20)
# # axes[0,1].plot(t_axis_array*1e4,U_vs_ASOR_500*1000,color=u'#348ABD', linewidth=0.6)
# axes[0,1].plot(t_axis_array*1e4,U_vs_ASOR_1000*1000,color=u'#348ABD', linewidth=0.6)
# # axes[0,1].set_ylim(5.5,7.5)
# # axes[0,1].set_xlim(0,T)
# axes[0,1].spines['right'].set_visible(False)
# axes[0,1].spines['top'].set_visible(False)
# axes[0,1].spines['bottom'].set_linewidth(0.4)
# axes[0,1].spines['left'].set_linewidth(0.4)
# axes[0,1].spines['left'].set_position(('outward', 5))
# axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[0,1].set_ylabel('mV', fontname="Arial", fontsize =24)
# # axes[0,1].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

# axes[0,2].set_title('Volume', fontsize=20)
# # axes[0,2].plot(t_axis_array*1e4,V_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[0,2].plot(t_axis_array*1e4,V_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# # axes[0,2].set_ylim(5.5,7.5)
# # axes[0,2].set_xlim(0,T)
# axes[0,2].spines['right'].set_visible(False)
# axes[0,2].spines['top'].set_visible(False)
# axes[0,2].spines['bottom'].set_linewidth(0.4)
# axes[0,2].spines['left'].set_linewidth(0.4)
# axes[0,2].spines['left'].set_position(('outward', 5))
# axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[0,2].set_ylabel('$\mathregular{um^3}$', fontname="Arial", fontsize =24)
# # axes[0,2].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

# axes[1,0].set_title('f(pH)', fontsize=20)
# # axes[1,0].plot(t_axis_array*1e4,fpH_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[1,0].plot(t_axis_array*1e4,fpH_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# # axes[1,0].set_ylim(5.5,7.5)
# # axes[1,0].set_xlim(0,T)
# axes[1,0].spines['right'].set_visible(False)
# axes[1,0].spines['top'].set_visible(False)
# axes[1,0].spines['bottom'].set_linewidth(0.4)
# axes[1,0].spines['left'].set_linewidth(0.4)
# axes[1,0].spines['left'].set_position(('outward', 5))
# axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[1,0].set_ylabel('f(pH)', fontname="Arial", fontsize =24)
# axes[1,0].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$, 10$^{-4}$', fontname="Arial", fontsize =20)

# axes[1,1].set_title('f(U)', fontsize=20)
# # axes[1,1].plot(t_axis_array*1e4,fU_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[1,1].plot(t_axis_array*1e4,fU_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# # axes[1,1].set_ylim(5.5,7.5)
# # axes[1,1].set_xlim(0,T)
# axes[1,1].spines['right'].set_visible(False)
# axes[1,1].spines['top'].set_visible(False)
# axes[1,1].spines['bottom'].set_linewidth(0.4)
# axes[1,1].spines['left'].set_linewidth(0.4)
# axes[1,1].spines['left'].set_position(('outward', 5))
# axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[1,1].set_ylabel('f(U)', fontname="Arial", fontsize =24)
# axes[1,1].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$, 10$^{-4}$', fontname="Arial", fontsize =20)

# axes[1,2].set_title('f(pH)*f(U)', fontsize=20)
# # axes[1,2].plot(t_axis_array*1e4,fUpH_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[1,2].plot(t_axis_array*1e4,fUpH_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# # axes[1,1].set_ylim(5.5,7.5)
# # axes[1,2].set_xlim(0,T)
# axes[1,2].spines['right'].set_visible(False)
# axes[1,2].spines['top'].set_visible(False)
# axes[1,2].spines['bottom'].set_linewidth(0.4)
# axes[1,2].spines['left'].set_linewidth(0.4)
# axes[1,2].spines['left'].set_position(('outward', 5))
# axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
# axes[1,2].set_ylabel('f(pH)*f(U)', fontname="Arial", fontsize =24)
# axes[1,2].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$, 10$^{-4}$', fontname="Arial", fontsize =20)

# # plt.legend(['8x ASOR'], loc=0, fontsize=20, frameon=False)

# Plotting rate of voltage chane (400ms-600ms)/dt
axes[0,0].set_title('Rate of volume change', fontsize=20)
# axes[0,2].plot(t_axis_array*1e4,V_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
axes[0,0].plot(t_axis_array*1e4,-rate*1e3,color=u'#348ABD', linewidth=0.6)
# axes[0,2].set_ylim(5.5,7.5)
# axes[0,2].set_xlim(0,T)
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('$\mathregular{-µm^3}$/s, 10$^{-3}$', fontname="Arial", fontsize =24)
axes[0,0].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$, 10$^{-4}$', fontname="Arial", fontsize =20)

fig.delaxes(axes[0,1])
fig.delaxes(axes[0,2])
fig.delaxes(axes[1,0])
fig.delaxes(axes[1,1])
fig.delaxes(axes[1,2])


# plt.savefig(os.path.join('SM4 5oos linear multiple overexpressions ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 1000s linear multiple overexpressions ASOR.svg'), transparent=True)
plt.savefig(os.path.join('SM4 500s rate of volume change linear multiple overexpressions ASOR.svg'), transparent=True)













# %% Plotting 500s logarithmic

import matplotlib 
new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)

t_axis=[df["Expression level"][0], df["Expression level"][2], df["Expression level"][4], df["Expression level"][6], df["Expression level"][8], df["Expression level"][10], df["Expression level"][12], df["Expression level"][14], df["Expression level"][16], df["Expression level"][18], df["Expression level"][20]]
t_axis_array=np.array(t_axis)

fig,axes = plt.subplots(2,3, figsize = (15, 7), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

plt.subplots_adjust(hspace=0.3)

axes[0,0].set_title('pH', fontsize=20)
axes[0,0].plot(np.log2(t_axis_array),pH_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[0,0].plot(np.log2(t_axis_array),pH_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# axes[0,0].set_ylim(5.5,7.5)
# axes[0,0].set_xlim(0,T)
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('pH', fontname="Arial", fontsize =24)
# axes[0,0].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

axes[0,1].set_title('Membrane potential', fontsize=20)
axes[0,1].plot(np.log2(t_axis_array),U_vs_ASOR_500*1000,color=u'#348ABD', linewidth=0.6)
# axes[0,1].plot(np.log2(t_axis_array),U_vs_ASOR_1000*1000,color=u'#348ABD', linewidth=0.6)
# axes[0,1].set_ylim(5.5,7.5)
# axes[0,1].set_xlim(0,T)
axes[0,1].spines['right'].set_visible(False)
axes[0,1].spines['top'].set_visible(False)
axes[0,1].spines['bottom'].set_linewidth(0.4)
axes[0,1].spines['left'].set_linewidth(0.4)
axes[0,1].spines['left'].set_position(('outward', 5))
axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,1].set_ylabel('mV', fontname="Arial", fontsize =24)
# axes[0,1].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

axes[0,2].set_title('Volume', fontsize=20)
axes[0,2].plot(np.log2(t_axis_array),V_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[0,2].plot(np.log2(t_axis_array),V_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# axes[0,2].set_ylim(5.5,7.5)
# axes[0,2].set_xlim(0,T)
axes[0,2].spines['right'].set_visible(False)
axes[0,2].spines['top'].set_visible(False)
axes[0,2].spines['bottom'].set_linewidth(0.4)
axes[0,2].spines['left'].set_linewidth(0.4)
axes[0,2].spines['left'].set_position(('outward', 5))
axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,2].set_ylabel('$\mathregular{um^3}$', fontname="Arial", fontsize =24)
# axes[0,2].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

axes[1,0].set_title('f(pH)', fontsize=20)
axes[1,0].plot(np.log2(t_axis_array),fpH_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[1,0].plot(np.log2(t_axis_array),fpH_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# axes[1,0].set_ylim(5.5,7.5)
# axes[1,0].set_xlim(0,T)
axes[1,0].spines['right'].set_visible(False)
axes[1,0].spines['top'].set_visible(False)
axes[1,0].spines['bottom'].set_linewidth(0.4)
axes[1,0].spines['left'].set_linewidth(0.4)
axes[1,0].spines['left'].set_position(('outward', 5))
axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,0].set_ylabel('f(pH)', fontname="Arial", fontsize =24)
axes[1,0].set_xlabel('$log_{2}$ ASOR expression level', fontname="Arial", fontsize =20)

axes[1,1].set_title('f(U)', fontsize=20)
axes[1,1].plot(np.log2(t_axis_array),fU_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[1,1].plot(np.log2(t_axis_array),fU_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# axes[1,1].set_ylim(5.5,7.5)
# axes[1,1].set_xlim(0,T)
axes[1,1].spines['right'].set_visible(False)
axes[1,1].spines['top'].set_visible(False)
axes[1,1].spines['bottom'].set_linewidth(0.4)
axes[1,1].spines['left'].set_linewidth(0.4)
axes[1,1].spines['left'].set_position(('outward', 5))
axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,1].set_ylabel('f(U)', fontname="Arial", fontsize =24)
axes[1,1].set_xlabel('$log_{2}$ ASOR expression level', fontname="Arial", fontsize =20)

axes[1,2].set_title('f(pH)*f(U)', fontsize=20)
axes[1,2].plot(np.log2(t_axis_array),fUpH_vs_ASOR_500,color=u'#348ABD', linewidth=0.6)
# axes[1,2].plot(np.log2(t_axis_array),fUpH_vs_ASOR_1000,color=u'#348ABD', linewidth=0.6)
# axes[1,1].set_ylim(5.5,7.5)
# axes[1,2].set_xlim(0,T)
axes[1,2].spines['right'].set_visible(False)
axes[1,2].spines['top'].set_visible(False)
axes[1,2].spines['bottom'].set_linewidth(0.4)
axes[1,2].spines['left'].set_linewidth(0.4)
axes[1,2].spines['left'].set_position(('outward', 5))
axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,2].set_ylabel('f(pH)*f(U)', fontname="Arial", fontsize =24)
axes[1,2].set_xlabel('$log_{2}$ ASOR expression level', fontname="Arial", fontsize =20)

# plt.legend(['8x ASOR'], loc=0, fontsize=20, frameon=False)


plt.savefig(os.path.join('SM4 5oos log multiple overexpressions ASOR.svg'), transparent=True)
# plt.savefig(os.path.join('SM4 1000s log multiple overexpressions ASOR.svg'), transparent=True)


















# %% Plotting double log 10

import matplotlib 
new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)

t_axis=[df["Expression level"][0], df["Expression level"][2], df["Expression level"][4], df["Expression level"][6], df["Expression level"][8], df["Expression level"][10], df["Expression level"][12], df["Expression level"][14], df["Expression level"][16], df["Expression level"][18], df["Expression level"][20]]
t_axis_array=np.array(t_axis)

fig,axes = plt.subplots(2,3, figsize = (15, 7), sharex = True)
plt.subplots_adjust(wspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "sans-serif"

plt.subplots_adjust(hspace=0.3)

axes[0,0].set_title('pH', fontsize=20)
# axes[0,0].plot(np.log10(t_axis_array),np.log10(pH_vs_ASOR_500),color=u'#348ABD', linewidth=0.6)
axes[0,0].plot(np.log10(t_axis_array),np.log10(pH_vs_ASOR_1000),color=u'#348ABD', linewidth=0.6)
# axes[0,0].set_ylim(5.5,7.5)
# axes[0,0].set_xlim(0,T)
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('$log_{10}$ pH', fontname="Arial", fontsize =24)
# axes[0,0].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

axes[0,1].set_title('Membrane potential', fontsize=20)
# axes[0,1].plot(np.log10(t_axis_array),np.log10(U_vs_ASOR_500),color=u'#348ABD', linewidth=0.6)
axes[0,1].plot(np.log10(t_axis_array),np.log10(U_vs_ASOR_1000),color=u'#348ABD', linewidth=0.6)
# axes[0,1].set_ylim(5.5,7.5)
# axes[0,1].set_xlim(0,T)
axes[0,1].spines['right'].set_visible(False)
axes[0,1].spines['top'].set_visible(False)
axes[0,1].spines['bottom'].set_linewidth(0.4)
axes[0,1].spines['left'].set_linewidth(0.4)
axes[0,1].spines['left'].set_position(('outward', 5))
axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,1].set_ylabel('$log_{10}$ U', fontname="Arial", fontsize =24)
# axes[0,1].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

axes[0,2].set_title('Volume', fontsize=20)
# axes[0,2].plot(np.log10(t_axis_array),np.log10(V_vs_ASOR_500),color=u'#348ABD', linewidth=0.6)
axes[0,2].plot(np.log10(t_axis_array),np.log10(V_vs_ASOR_1000),color=u'#348ABD', linewidth=0.6)
# axes[0,2].set_ylim(5.5,7.5)
# axes[0,2].set_xlim(0,T)
axes[0,2].spines['right'].set_visible(False)
axes[0,2].spines['top'].set_visible(False)
axes[0,2].spines['bottom'].set_linewidth(0.4)
axes[0,2].spines['left'].set_linewidth(0.4)
axes[0,2].spines['left'].set_position(('outward', 5))
axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,2].set_ylabel('$log_{10}$ V', fontname="Arial", fontsize =24)
# axes[0,2].set_xlabel('ASOR expression level, \n mol*s$^{-1}$*V$^{-1}$*m$^{-2}$', fontname="Arial", fontsize =14)

axes[1,0].set_title('f(pH)', fontsize=20)
# axes[1,0].plot(np.log10(t_axis_array),np.log10(fpH_vs_ASOR_500),color=u'#348ABD', linewidth=0.6)
axes[1,0].plot(np.log10(t_axis_array),np.log10(fpH_vs_ASOR_1000),color=u'#348ABD', linewidth=0.6)
# axes[1,0].set_ylim(5.5,7.5)
# axes[1,0].set_xlim(0,T)
axes[1,0].spines['right'].set_visible(False)
axes[1,0].spines['top'].set_visible(False)
axes[1,0].spines['bottom'].set_linewidth(0.4)
axes[1,0].spines['left'].set_linewidth(0.4)
axes[1,0].spines['left'].set_position(('outward', 5))
axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,0].set_ylabel('$log_{10}$ f(pH)', fontname="Arial", fontsize =24)
axes[1,0].set_xlabel('$log_{10}$ ASOR expression level', fontname="Arial", fontsize =20)

axes[1,1].set_title('f(U)', fontsize=20)
# axes[1,1].plot(np.log10(t_axis_array),np.log10(fU_vs_ASOR_500),color=u'#348ABD', linewidth=0.6)
axes[1,1].plot(np.log10(t_axis_array),np.log10(fU_vs_ASOR_1000),color=u'#348ABD', linewidth=0.6)
# axes[1,1].set_ylim(5.5,7.5)
# axes[1,1].set_xlim(0,T)
axes[1,1].spines['right'].set_visible(False)
axes[1,1].spines['top'].set_visible(False)
axes[1,1].spines['bottom'].set_linewidth(0.4)
axes[1,1].spines['left'].set_linewidth(0.4)
axes[1,1].spines['left'].set_position(('outward', 5))
axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,1].set_ylabel('$log_{10}$ f(U)', fontname="Arial", fontsize =24)
axes[1,1].set_xlabel('$log_{10}$ ASOR expression level', fontname="Arial", fontsize =20)

axes[1,2].set_title('f(pH)*f(U)', fontsize=20)
# axes[1,2].plot(np.log10(t_axis_array),np.log10(fUpH_vs_ASOR_500),color=u'#348ABD', linewidth=0.6)
axes[1,2].plot(np.log10(t_axis_array),np.log10(fUpH_vs_ASOR_1000),color=u'#348ABD', linewidth=0.6)
# axes[1,1].set_ylim(5.5,7.5)
# axes[1,2].set_xlim(0,T)
axes[1,2].spines['right'].set_visible(False)
axes[1,2].spines['top'].set_visible(False)
axes[1,2].spines['bottom'].set_linewidth(0.4)
axes[1,2].spines['left'].set_linewidth(0.4)
axes[1,2].spines['left'].set_position(('outward', 5))
axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,2].set_ylabel('$log_{10}$ f(pH)*f(U)', fontname="Arial", fontsize =24)
axes[1,2].set_xlabel('$log_{10}$ ASOR expression level', fontname="Arial", fontsize =20)

# plt.legend(['8x ASOR'], loc=0, fontsize=20, frameon=False)


# plt.savefig(os.path.join('SM4 500s double log multiple overexpressions ASOR.svg'), transparent=True)
plt.savefig(os.path.join('SM4 1000s double log multiple overexpressions ASOR.svg'), transparent=True)
































#%% SM5 low/high Cl figures

import matplotlib 
new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(1,3, figsize = (15, 5), sharex = True)
plt.subplots_adjust(wspace=0.55, hspace=0.6)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "Arial"

# axes[0].plot(t_axis,pH_over_time,color=u'#348ABD', linewidth=0.6)
axes[0].plot(t_axis,pH_over_time,color=u'#E24A33', linewidth=0.6)
axes[0].set_title('pH', fontsize=20, pad=20)
axes[0].set_ylim(5.0,7.5)
axes[0].set_xlim(0,1000)
axes[0].spines['right'].set_visible(False)
axes[0].spines['top'].set_visible(False)
axes[0].spines['bottom'].set_linewidth(0.4)
axes[0].spines['left'].set_linewidth(0.4)
axes[0].spines['left'].set_position(('outward', 5))
axes[0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0].set_ylabel('pH', fontname="Arial", fontsize =24)
axes[0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[1].plot(t_axis,volume_over_time*1e18, color=u'#348ABD', linewidth=0.6)
axes[1].plot(t_axis,volume_over_time*1e18, color=u'#E24A33', linewidth=0.6)
axes[1].set_title('Volume', fontsize=20, pad=20)
axes[1].set_ylim(1,10)
axes[1].set_xlim(0,1000)
axes[1].spines['right'].set_visible(False)
axes[1].spines['top'].set_visible(False)
axes[1].spines['bottom'].set_linewidth(0.4)
axes[1].spines['left'].set_linewidth(0.4)
axes[1].spines['left'].set_position(('outward', 5))
axes[1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1].set_ylabel(' $\mathregular{µm^3}$', fontname="Arial", fontsize =24)
axes[1].set_xlabel('Time, s', fontname="Arial", fontsize =24)


# axes[2].plot(t_axis,U_over_time*1000, color=u'#348ABD', linewidth=0.6)
axes[2].plot(t_axis,U_over_time*1000, color=u'#E24A33', linewidth=0.6)
axes[2].set_title('Membrane potential', fontsize=20, pad=20)
axes[2].set_ylim(-80,40)
axes[2].set_xlim(0,1000)
axes[2].spines['right'].set_visible(False)
axes[2].spines['top'].set_visible(False)
axes[2].spines['bottom'].set_linewidth(0.4)
axes[2].spines['left'].set_linewidth(0.4)
axes[2].spines['left'].set_position(('outward', 5))
axes[2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[2].set_ylabel('mV', fontname="Arial", fontsize =24)
axes[2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# plt.legend(['9 mM Cl$^{-}$'], loc=0, bbox_to_anchor=(0, 0.1, 0.5, 0.5), fontsize=20, frameon=False)

# plt.savefig(os.path.join('SM5a ASOR+TPC+ClC+H-ATPase+H-leak high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5a ASOR+TPC+ClC+H-ATPase+H-leak low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5b TPC+ClC+H-ATPase+H-leak high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5b TPC+ClC+H-ATPase+H-leak low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5c TPC+ClC+H-leak high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5c TPC+ClC+H-leak low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5j ASOR+TPC+H-leak high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5j ASOR+TPC+H-leak low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5h ASOR+TPC+CLC high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5h ASOR+TPC+CLC low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5d TPC+CLC high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5d TPC+CLC low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5g ASOR+TPC+CLC+H-ATPase high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5g ASOR+TPC+CLC+H-ATPase low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5i ASOR+TPC+H-ATPase high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5i ASOR+TPC+H-ATPase low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5e ASOR+TPC+H-ATPase+H-leak high Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5e ASOR+TPC+H-ATPase+H-leak low Cl.svg'), transparent=True)
# plt.savefig(os.path.join('SM5f ASOR+TPC+ClC+H-leak high Cl.svg'), transparent=True)
plt.savefig(os.path.join('SM5f ASOR+TPC+ClC+H-leak low Cl.svg'), transparent=True)

# plt.savefig(os.path.join('SM2 ASOR+TPC+H-ATPase.svg'), transparent=True)






























#%% SM5 fluxes

import matplotlib 
new_rc_params = {'text.usetex': False, "svg.fonttype": 'none'}
matplotlib.rcParams.update(new_rc_params)
#ax.set_xticklabels(fontsize = 10, rotation = 0)
t_axis2=np.arange(0,T-dt,dt)
fig,axes = plt.subplots(2,3, figsize = (15, 10), sharex = False)
plt.subplots_adjust(wspace=0.55, hspace=0.5)
matplotlib.rcParams['font.sans-serif'] = "Arial"
matplotlib.rcParams['font.family'] = "Arial"

# axes[0,0].plot(t_axis2,Cl_FLUX_asor*1e18, color=u'#348ABD', linewidth=0.6)
axes[0,0].plot(t_axis2,Cl_FLUX_asor*1e18, color=u'#E24A33', linewidth=0.6)
axes[0,0].set_title('Cl$^{-}$ flux through ASOR', fontsize=20)
axes[0,0].set_ylim(-2,0.1)
axes[0,0].set_xlim(0,T)
axes[0,0].spines['right'].set_visible(False)
axes[0,0].spines['top'].set_visible(False)
axes[0,0].spines['bottom'].set_linewidth(0.4)
axes[0,0].spines['left'].set_linewidth(0.4)
axes[0,0].spines['left'].set_position(('outward', 5))
axes[0,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,0].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[0,0].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[0,1].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
axes[0,1].plot(t_axis2,Cl_FLUX_CLC*1e19, color=u'#E24A33', linewidth=0.6)
axes[0,1].set_title('Cl$^{-}$ flux through CLC', fontsize=20)
axes[0,1].set_ylim(-3.5,0.1)
axes[0,1].set_xlim(0,T)
axes[0,1].spines['right'].set_visible(False)
axes[0,1].spines['top'].set_visible(False)
axes[0,1].spines['bottom'].set_linewidth(0.4)
axes[0,1].spines['left'].set_linewidth(0.4)
axes[0,1].spines['left'].set_position(('outward', 5))
axes[0,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,1].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[0,1].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[0,2].plot(t_axis2,H_FLUX_CLC*1e19, color=u'#348ABD', linewidth=0.6)
axes[0,2].plot(t_axis2,H_FLUX_CLC*1e19, color=u'#E24A33', linewidth=0.6)
axes[0,2].set_title('H$^{+}$ flux through CLC', fontsize=20)
axes[0,2].set_ylim(-0.1,1.5)
axes[0,2].set_xlim(0,T)
axes[0,2].spines['right'].set_visible(False)
axes[0,2].spines['top'].set_visible(False)
axes[0,2].spines['bottom'].set_linewidth(0.4)
axes[0,2].spines['left'].set_linewidth(0.4)
axes[0,2].spines['left'].set_position(('outward', 5))
axes[0,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[0,2].set_ylabel('mol*s$^{-1}$, $10^{-19}$', fontname="Arial", fontsize =24)
axes[0,2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# axes[1,0].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#348ABD', linewidth=0.6)
axes[1,0].plot(t_axis2,na_FLUX_tpc*1e18, color=u'#E24A33', linewidth=0.6)
axes[1,0].set_title('Na$^{+}$ flux through TPC', fontsize=20)
axes[1,0].set_ylim(-5,0)
axes[1,0].set_xlim(0,T)
axes[1,0].spines['right'].set_visible(False)
axes[1,0].spines['top'].set_visible(False)
axes[1,0].spines['bottom'].set_linewidth(0.4)
axes[1,0].spines['left'].set_linewidth(0.4)
axes[1,0].spines['left'].set_position(('outward', 5))
axes[1,0].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,0].set_ylabel('mol*s$^{-1}$, $10^{-18}$', fontname="Arial", fontsize =24)
axes[1,0].set_xlabel('Time, s', fontname="Arial", fontsize =24)


# axes[1,1].plot(t_axis2,H_FLUX_VATPase*1e20, color=u'#348ABD', linewidth=0.6)
axes[1,1].plot(t_axis2,H_FLUX_VATPase*1e20, color=u'#E24A33', linewidth=0.6)
axes[1,1].set_title('H$^{+}$ flux through V-ATPase', fontsize=20, pad=20)
axes[1,1].set_ylim(-0.1,3)
axes[1,1].set_xlim(0,1000)
axes[1,1].spines['right'].set_visible(False)
axes[1,1].spines['top'].set_visible(False)
axes[1,1].spines['bottom'].set_linewidth(0.4)
axes[1,1].spines['left'].set_linewidth(0.4)
axes[1,1].spines['left'].set_position(('outward', 5))
axes[1,1].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,1].set_ylabel('mol*s$^{-1}$, $10^{-20}$', fontname="Arial", fontsize =24)
axes[1,1].set_xlabel('Time, s', fontname="Arial", fontsize =24)


# axes[1,2].plot(t_axis2,H_FLUX_leak*1e20, color=u'#348ABD', linewidth=0.6)
axes[1,2].plot(t_axis2,H_FLUX_leak*1e20, color=u'#E24A33', linewidth=0.6)
axes[1,2].set_title('H$^{+}$ flux through H-leak', fontsize=20, pad=20)
axes[1,2].set_ylim(-2,3)
axes[1,2].set_xlim(0,1000)
axes[1,2].spines['right'].set_visible(False)
axes[1,2].spines['top'].set_visible(False)
axes[1,2].spines['bottom'].set_linewidth(0.4)
axes[1,2].spines['left'].set_linewidth(0.4)
axes[1,2].spines['left'].set_position(('outward', 5))
axes[1,2].tick_params(axis='both', which='major', labelsize=16, width=0.1)
axes[1,2].set_ylabel('mol*s$^{-1}$, $10^{-20}$', fontname="Arial", fontsize =24)
axes[1,2].set_xlabel('Time, s', fontname="Arial", fontsize =24)

# plt.legend(['159 mM Cl$^{-}$'], loc=0, bbox_to_anchor=(0, 0.1, 0.5, 0.5), fontsize=20, frameon=False)

# plt.savefig(os.path.join('SM5a ASOR+TPC+ClC+H-ATPase+H-leak high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5a ASOR+TPC+ClC+H-ATPase+H-leak low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5b TPC+ClC+H-ATPase+H-leak high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5b TPC+ClC+H-ATPase+H-leak low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5c TPC+ClC+H-leak high Cl fluxes.svg'), transparent=True)
plt.savefig(os.path.join('SM5c TPC+ClC+H-leak low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5j ASOR+TPC+H-leak high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5j ASOR+TPC+H-leak low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5h ASOR+TPC+ClC high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5h ASOR+TPC+ClC low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5d TPC+ClC high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5d TPC+ClC low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5g ASOR+TPC+ClC+H-ATPase high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5g ASOR+TPC+ClC+H-ATPase low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5i ASOR+TPC+H-ATPase high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5i ASOR+TPC+H-ATPase low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5e ASOR+TPC+H-ATPase+H-leak high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5e ASOR+TPC+H-ATPase+H-leak low Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5f ASOR+TPC+ClC+H-leak high Cl fluxes.svg'), transparent=True)
# plt.savefig(os.path.join('SM5f ASOR+TPC+ClC+H-leak low Cl fluxes.svg'), transparent=True)





































# %%
# fig,axes = plt.subplots(3,5, figsize = (25,15), sharex = True)

# axes[0,0].plot(t_axis,Ion_concentrations_over_time[:,0])
# axes[0,0].set_title('Chloride concentration')

# axes[0,1].plot(t_axis,Ion_concentrations_over_time[:,1])
# axes[0,1].set_title('Sodium concentration')

# axes[0,2].plot(t_axis,Ion_concentrations_over_time[:,2])
# axes[0,2].set_title('Hydrogen concentration')

# axes[0,3].plot(t_axis,Ion_concentrations_over_time[:,3])
# axes[0,3].set_title('Potassium concentration')

# axes[1,0].plot(t_axis,Ion_amounts_over_time[:,0])
# axes[1,0].set_title('Chloride amounts')

# axes[1,1].plot(t_axis,Ion_amounts_over_time[:,1])
# axes[1,1].set_title('Sodium amounts')

# axes[1,2].plot(t_axis,Ion_amounts_over_time[:,2])
# axes[1,2].set_title('Hydrogen amounts')

# axes[1,3].plot(t_axis,Ion_amounts_over_time[:,3])
# axes[1,3].set_title('Potassium amounts')

# axes[2,0].plot(t_axis,pH_over_time)
# axes[2,0].set_title('pH')

# axes[2,1].plot(t_axis,volume_over_time)
# axes[2,1].set_title('Volume')

# axes[2,2].plot(t_axis,U_over_time)
# axes[2,2].set_title('Membrane potential')

# axes[2,3].plot(t_axis,area_over_time)
# axes[2,3].set_title('Area')

# axes[2,4].plot(t_axis,capacity_over_time)
# axes[2,4].set_title('Membrane capacity')

# axes[1,4].plot(t_axis,1/buffer_over_time)
# axes[1,4].set_title('Buffer capacity')

# fig.delaxes(axes[0,4])
# plt.subplots_adjust(wspace=None, hspace=None)







# t_axis2=np.arange(0,T-dt,dt)
# fig,axes = plt.subplots(3,4, figsize = (20,15), sharex = True)

# axes[0,0].plot(t_axis2,Cl_FLUX_asor)
# axes[0,0].set_title('Cl flux through ASOR')
# axes[0,1].plot(t_axis2,Cl_FLUX_CLC)
# axes[0,1].set_title('Cl flux through ClC')
# axes[0,2].plot(t_axis2,na_FLUX_tpc)
# axes[0,2].set_title('Na flux through TPC')
# axes[1,0].plot(t_axis2,na_FLUX_nhe)
# axes[1,0].set_title('Na flux through NHE')
# axes[1,1].plot(t_axis2,H_FLUX_CLC)
# axes[1,1].set_title('H flux through CLC')
# axes[1,2].plot(t_axis2,H_FLUX_NHE)
# axes[1,2].set_title('H flux through NHE')
# axes[2,0].plot(t_axis2,K_FLUX)
# axes[2,0].set_title('K flux')
# axes[2,1].plot(t_axis2,Cl_FLUX_Cl_OH)
# axes[2,1].set_title('Cl flux through Cl/OH')
# axes[2,2].plot(t_axis2,H_FLUX_Cl_OH)
# axes[2,2].set_title('H flux through Cl/OH')
# axes[2,3].plot(t_axis2,H_FLUX_VATPase)
# axes[2,3].set_title('H flux through V-ATPase')
# axes[1,3].plot(t_axis2,H_FLUX_leak)
# axes[1,3].set_title('H leak flux')
# fig.delaxes(axes[0,3])


# plt.subplots_adjust(wspace=None, hspace=None)

# pH_step=0.1
# pH_start=1
# pH_end=12
# voltage_step=5*1e-3
# voltage_start=-100*1e-3
# voltage_end=100*1e-3

# pH_axis = np.arange(pH_start, pH_end, pH_step)
# voltage_axis = np.arange(voltage_start, voltage_end, voltage_step)

# pH_values_ASOR=np.zeros(len(pH_axis))
# U_values_ASOR=np.zeros(len(voltage_axis))
# pH_values_ClC=np.zeros(len(pH_axis))
# U_values_ClC=np.zeros(len(voltage_axis))

# '''
# for i in range(len(pH_axis)):
#   h=10**(-pH_axis[i])
#   pH_values[i]=pH_dependence(h)
#   '''

# pH = pH_start
# for i in range(len(pH_axis)):
#   pH = pH + pH_step
#   pH_values_ASOR[i] = pH_dependence_ASOR(pH)
#   pH_values_ClC[i] = pH_dependence_ClC(pH)

# for i in range(len(voltage_axis)):
#   U_values_ASOR[i]=v_dependence_ASOR(voltage_axis[i])
#   U_values_ClC[i]=v_dependence_ClC(voltage_axis[i])

# fig,axes = plt.subplots(3,2, figsize = (10,15))

# axes[0,0].plot(pH_axis,pH_values_ASOR)
# axes[0,0].set_title('pH_dependence_ASOR')
# axes[0,1].plot(voltage_axis,U_values_ASOR)
# axes[0,1].set_title('U_dependence_ASOR')
# axes[1,0].plot(pH_axis,pH_values_ClC)
# axes[1,0].set_title('pH_dependence_ClC')
# axes[1,1].plot(voltage_axis,U_values_ClC)
# axes[1,1].set_title('U_dependence_ClC')
# axes[2,0].plot(t_axis,VATPase_time_dep)
# axes[2,0].set_title('Insertion of the pump in the membrane')
# fig.delaxes(axes[2,1])

# plt.subplots_adjust(wspace=None, hspace=None)

# pH_U_product_ASOR=ASOR_pH_dep*ASOR_voltage_dep
# pH_U_product_ClC=ClC_pH_dep*ClC_voltage_dep

# fig,axes = plt.subplots(2,3, figsize = (15,10))

# axes[0,0].plot(t_axis,ASOR_pH_dep)
# axes[0,0].set_title('ASOR_pH_dependence')
# axes[0,1].plot(t_axis,ASOR_voltage_dep)
# axes[0,1].set_title('ASOR_voltage_dependence')
# axes[0,2].plot(t_axis,pH_U_product_ASOR)
# axes[0,2].set_title('ASOR_Product of pH*voltage dependences')
# axes[1,0].plot(t_axis,ClC_pH_dep)
# axes[1,0].set_title('ClC_pH_dependence')
# axes[1,1].plot(t_axis,ClC_voltage_dep)
# axes[1,1].set_title('ClC_voltage_dependence')
# axes[1,2].plot(t_axis,pH_U_product_ClC)
# axes[1,2].set_title('ClC_Product of pH*voltage dependences')

# plt.subplots_adjust(wspace=None, hspace=None)


# # %%
# import os
# import csv
# date_dir='Y:/group/mzeziulia/macrophages/BMDM/BMDMS macropinocytosis/paper/model stuff/exported data'
# csv_name = os.path.join(date_dir,'suppl1 ASOR+TPC.csv')
# row_list = [['pH', 'Volume', 'Membrane potential', 'Cl flux ASOR', 'Na flux TPC']]
# with open(csv_name, 'a', newline='') as file:
#     writer = csv.writer(file)
#     writer.writerow(row_list)
# with open(csv_name, 'a', newline='') as file:
#     for i in range (len (Ion_concentrations_over_time)):
#         if i<len(Ion_amounts_over_time)-1:
#             row_list=pH_over_time[i], volume_over_time[i], U_over_time[i], Cl_FLUX_asor[i], na_FLUX_tpc[i] 
#             writer = csv.writer(file)
#             writer.writerow(row_list)
#         else: 
#             row_list=pH_over_time[i], volume_over_time[i], U_over_time[i]
#             writer = csv.writer(file)
#             writer.writerow(row_list)
# %%
